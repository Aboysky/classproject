<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.edu.sicnu.cs.dao.TaskestimateMapper">
  <resultMap id="BaseResultMap" type="cn.edu.sicnu.cs.model.Taskestimate">
    <id column="tazid" jdbcType="BIGINT" property="tazid" />
    <result column="taid" jdbcType="BIGINT" property="taid" />
    <result column="taconsumed" jdbcType="REAL" property="taconsumed" />
  </resultMap>
  <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="cn.edu.sicnu.cs.model.Taskestimate">
    <result column="tawork" jdbcType="LONGVARCHAR" property="tawork" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    tazid, taid, taconsumed
  </sql>
  <sql id="Blob_Column_List">
    tawork
  </sql>
  <select id="selectByExampleWithBLOBs" parameterType="cn.edu.sicnu.cs.model.TaskestimateExample" resultMap="ResultMapWithBLOBs">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from taskestimate
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExample" parameterType="cn.edu.sicnu.cs.model.TaskestimateExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from taskestimate
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="ResultMapWithBLOBs">
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from taskestimate
    where tazid = #{tazid,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from taskestimate
    where tazid = #{tazid,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="cn.edu.sicnu.cs.model.TaskestimateExample">
    delete from taskestimate
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="cn.edu.sicnu.cs.model.Taskestimate">
    insert into taskestimate (tazid, taid, taconsumed, 
      tawork)
    values (#{tazid,jdbcType=BIGINT}, #{taid,jdbcType=BIGINT}, #{taconsumed,jdbcType=REAL}, 
      #{tawork,jdbcType=LONGVARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="cn.edu.sicnu.cs.model.Taskestimate">
    insert into taskestimate
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="tazid != null">
        tazid,
      </if>
      <if test="taid != null">
        taid,
      </if>
      <if test="taconsumed != null">
        taconsumed,
      </if>
      <if test="tawork != null">
        tawork,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="tazid != null">
        #{tazid,jdbcType=BIGINT},
      </if>
      <if test="taid != null">
        #{taid,jdbcType=BIGINT},
      </if>
      <if test="taconsumed != null">
        #{taconsumed,jdbcType=REAL},
      </if>
      <if test="tawork != null">
        #{tawork,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="cn.edu.sicnu.cs.model.TaskestimateExample" resultType="java.lang.Long">
    select count(*) from taskestimate
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update taskestimate
    <set>
      <if test="record.tazid != null">
        tazid = #{record.tazid,jdbcType=BIGINT},
      </if>
      <if test="record.taid != null">
        taid = #{record.taid,jdbcType=BIGINT},
      </if>
      <if test="record.taconsumed != null">
        taconsumed = #{record.taconsumed,jdbcType=REAL},
      </if>
      <if test="record.tawork != null">
        tawork = #{record.tawork,jdbcType=LONGVARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map">
    update taskestimate
    set tazid = #{record.tazid,jdbcType=BIGINT},
      taid = #{record.taid,jdbcType=BIGINT},
      taconsumed = #{record.taconsumed,jdbcType=REAL},
      tawork = #{record.tawork,jdbcType=LONGVARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update taskestimate
    set tazid = #{record.tazid,jdbcType=BIGINT},
      taid = #{record.taid,jdbcType=BIGINT},
      taconsumed = #{record.taconsumed,jdbcType=REAL}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="cn.edu.sicnu.cs.model.Taskestimate">
    update taskestimate
    <set>
      <if test="taid != null">
        taid = #{taid,jdbcType=BIGINT},
      </if>
      <if test="taconsumed != null">
        taconsumed = #{taconsumed,jdbcType=REAL},
      </if>
      <if test="tawork != null">
        tawork = #{tawork,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where tazid = #{tazid,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="cn.edu.sicnu.cs.model.Taskestimate">
    update taskestimate
    set taid = #{taid,jdbcType=BIGINT},
      taconsumed = #{taconsumed,jdbcType=REAL},
      tawork = #{tawork,jdbcType=LONGVARCHAR}
    where tazid = #{tazid,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="cn.edu.sicnu.cs.model.Taskestimate">
    update taskestimate
    set taid = #{taid,jdbcType=BIGINT},
      taconsumed = #{taconsumed,jdbcType=REAL}
    where tazid = #{tazid,jdbcType=BIGINT}
  </update>
</mapper>