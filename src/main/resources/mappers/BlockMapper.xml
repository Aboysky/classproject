<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.edu.sicnu.sc.softwareproduction.dao.BlockMapper">
  <resultMap id="BaseResultMap" type="cn.edu.sicnu.sc.softwareproduction.model.Block">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="account" jdbcType="VARCHAR" property="account" />
    <result column="module" jdbcType="VARCHAR" property="module" />
    <result column="title" jdbcType="VARCHAR" property="title" />
    <result column="source" jdbcType="VARCHAR" property="source" />
    <result column="block" jdbcType="VARCHAR" property="block" />
    <result column="order" jdbcType="TINYINT" property="order" />
    <result column="grid" jdbcType="TINYINT" property="grid" />
    <result column="height" jdbcType="SMALLINT" property="height" />
    <result column="hidden" jdbcType="TINYINT" property="hidden" />
  </resultMap>
  <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="cn.edu.sicnu.sc.softwareproduction.model.Block">
    <result column="params" jdbcType="LONGVARCHAR" property="params" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, account, module, title, source, block, order, grid, height, hidden
  </sql>
  <sql id="Blob_Column_List">
    params
  </sql>
  <select id="selectByExampleWithBLOBs" parameterType="cn.edu.sicnu.sc.softwareproduction.model.BlockExample" resultMap="ResultMapWithBLOBs">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from block
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExample" parameterType="cn.edu.sicnu.sc.softwareproduction.model.BlockExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from block
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="ResultMapWithBLOBs">
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from block
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from block
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="cn.edu.sicnu.sc.softwareproduction.model.BlockExample">
    delete from block
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="cn.edu.sicnu.sc.softwareproduction.model.Block">
    insert into block (id, account, module, 
      title, source, block, 
      order, grid, height, 
      hidden, params)
    values (#{id,jdbcType=INTEGER}, #{account,jdbcType=VARCHAR}, #{module,jdbcType=VARCHAR}, 
      #{title,jdbcType=VARCHAR}, #{source,jdbcType=VARCHAR}, #{block,jdbcType=VARCHAR}, 
      #{order,jdbcType=TINYINT}, #{grid,jdbcType=TINYINT}, #{height,jdbcType=SMALLINT}, 
      #{hidden,jdbcType=TINYINT}, #{params,jdbcType=LONGVARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="cn.edu.sicnu.sc.softwareproduction.model.Block">
    insert into block
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="account != null">
        account,
      </if>
      <if test="module != null">
        module,
      </if>
      <if test="title != null">
        title,
      </if>
      <if test="source != null">
        source,
      </if>
      <if test="block != null">
        block,
      </if>
      <if test="order != null">
        order,
      </if>
      <if test="grid != null">
        grid,
      </if>
      <if test="height != null">
        height,
      </if>
      <if test="hidden != null">
        hidden,
      </if>
      <if test="params != null">
        params,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="account != null">
        #{account,jdbcType=VARCHAR},
      </if>
      <if test="module != null">
        #{module,jdbcType=VARCHAR},
      </if>
      <if test="title != null">
        #{title,jdbcType=VARCHAR},
      </if>
      <if test="source != null">
        #{source,jdbcType=VARCHAR},
      </if>
      <if test="block != null">
        #{block,jdbcType=VARCHAR},
      </if>
      <if test="order != null">
        #{order,jdbcType=TINYINT},
      </if>
      <if test="grid != null">
        #{grid,jdbcType=TINYINT},
      </if>
      <if test="height != null">
        #{height,jdbcType=SMALLINT},
      </if>
      <if test="hidden != null">
        #{hidden,jdbcType=TINYINT},
      </if>
      <if test="params != null">
        #{params,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="cn.edu.sicnu.sc.softwareproduction.model.BlockExample" resultType="java.lang.Long">
    select count(*) from block
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update block
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.account != null">
        account = #{record.account,jdbcType=VARCHAR},
      </if>
      <if test="record.module != null">
        module = #{record.module,jdbcType=VARCHAR},
      </if>
      <if test="record.title != null">
        title = #{record.title,jdbcType=VARCHAR},
      </if>
      <if test="record.source != null">
        source = #{record.source,jdbcType=VARCHAR},
      </if>
      <if test="record.block != null">
        block = #{record.block,jdbcType=VARCHAR},
      </if>
      <if test="record.order != null">
        order = #{record.order,jdbcType=TINYINT},
      </if>
      <if test="record.grid != null">
        grid = #{record.grid,jdbcType=TINYINT},
      </if>
      <if test="record.height != null">
        height = #{record.height,jdbcType=SMALLINT},
      </if>
      <if test="record.hidden != null">
        hidden = #{record.hidden,jdbcType=TINYINT},
      </if>
      <if test="record.params != null">
        params = #{record.params,jdbcType=LONGVARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map">
    update block
    set id = #{record.id,jdbcType=INTEGER},
      account = #{record.account,jdbcType=VARCHAR},
      module = #{record.module,jdbcType=VARCHAR},
      title = #{record.title,jdbcType=VARCHAR},
      source = #{record.source,jdbcType=VARCHAR},
      block = #{record.block,jdbcType=VARCHAR},
      order = #{record.order,jdbcType=TINYINT},
      grid = #{record.grid,jdbcType=TINYINT},
      height = #{record.height,jdbcType=SMALLINT},
      hidden = #{record.hidden,jdbcType=TINYINT},
      params = #{record.params,jdbcType=LONGVARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update block
    set id = #{record.id,jdbcType=INTEGER},
      account = #{record.account,jdbcType=VARCHAR},
      module = #{record.module,jdbcType=VARCHAR},
      title = #{record.title,jdbcType=VARCHAR},
      source = #{record.source,jdbcType=VARCHAR},
      block = #{record.block,jdbcType=VARCHAR},
      order = #{record.order,jdbcType=TINYINT},
      grid = #{record.grid,jdbcType=TINYINT},
      height = #{record.height,jdbcType=SMALLINT},
      hidden = #{record.hidden,jdbcType=TINYINT}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="cn.edu.sicnu.sc.softwareproduction.model.Block">
    update block
    <set>
      <if test="account != null">
        account = #{account,jdbcType=VARCHAR},
      </if>
      <if test="module != null">
        module = #{module,jdbcType=VARCHAR},
      </if>
      <if test="title != null">
        title = #{title,jdbcType=VARCHAR},
      </if>
      <if test="source != null">
        source = #{source,jdbcType=VARCHAR},
      </if>
      <if test="block != null">
        block = #{block,jdbcType=VARCHAR},
      </if>
      <if test="order != null">
        order = #{order,jdbcType=TINYINT},
      </if>
      <if test="grid != null">
        grid = #{grid,jdbcType=TINYINT},
      </if>
      <if test="height != null">
        height = #{height,jdbcType=SMALLINT},
      </if>
      <if test="hidden != null">
        hidden = #{hidden,jdbcType=TINYINT},
      </if>
      <if test="params != null">
        params = #{params,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="cn.edu.sicnu.sc.softwareproduction.model.Block">
    update block
    set account = #{account,jdbcType=VARCHAR},
      module = #{module,jdbcType=VARCHAR},
      title = #{title,jdbcType=VARCHAR},
      source = #{source,jdbcType=VARCHAR},
      block = #{block,jdbcType=VARCHAR},
      order = #{order,jdbcType=TINYINT},
      grid = #{grid,jdbcType=TINYINT},
      height = #{height,jdbcType=SMALLINT},
      hidden = #{hidden,jdbcType=TINYINT},
      params = #{params,jdbcType=LONGVARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="cn.edu.sicnu.sc.softwareproduction.model.Block">
    update block
    set account = #{account,jdbcType=VARCHAR},
      module = #{module,jdbcType=VARCHAR},
      title = #{title,jdbcType=VARCHAR},
      source = #{source,jdbcType=VARCHAR},
      block = #{block,jdbcType=VARCHAR},
      order = #{order,jdbcType=TINYINT},
      grid = #{grid,jdbcType=TINYINT},
      height = #{height,jdbcType=SMALLINT},
      hidden = #{hidden,jdbcType=TINYINT}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>