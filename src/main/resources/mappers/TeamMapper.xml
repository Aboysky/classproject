<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.edu.sicnu.sc.softwareproduction.dao.TeamMapper">
  <resultMap id="BaseResultMap" type="cn.edu.sicnu.sc.softwareproduction.model.Team">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="root" jdbcType="INTEGER" property="root" />
    <result column="account" jdbcType="VARCHAR" property="account" />
    <result column="role" jdbcType="CHAR" property="role" />
    <result column="limited" jdbcType="CHAR" property="limited" />
    <result column="join" jdbcType="DATE" property="join" />
    <result column="days" jdbcType="SMALLINT" property="days" />
    <result column="hours" jdbcType="REAL" property="hours" />
    <result column="estimate" jdbcType="DECIMAL" property="estimate" />
    <result column="consumed" jdbcType="DECIMAL" property="consumed" />
    <result column="left" jdbcType="DECIMAL" property="left" />
    <result column="order" jdbcType="TINYINT" property="order" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, root, account, role, limited, join, days, hours, estimate, consumed, left, order
  </sql>
  <select id="selectByExample" parameterType="cn.edu.sicnu.sc.softwareproduction.model.TeamExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from team
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from team
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from team
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="cn.edu.sicnu.sc.softwareproduction.model.TeamExample">
    delete from team
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="cn.edu.sicnu.sc.softwareproduction.model.Team">
    insert into team (id, root, account, 
      role, limited, join, days, 
      hours, estimate, consumed, 
      left, order)
    values (#{id,jdbcType=INTEGER}, #{root,jdbcType=INTEGER}, #{account,jdbcType=VARCHAR}, 
      #{role,jdbcType=CHAR}, #{limited,jdbcType=CHAR}, #{join,jdbcType=DATE}, #{days,jdbcType=SMALLINT}, 
      #{hours,jdbcType=REAL}, #{estimate,jdbcType=DECIMAL}, #{consumed,jdbcType=DECIMAL}, 
      #{left,jdbcType=DECIMAL}, #{order,jdbcType=TINYINT})
  </insert>
  <insert id="insertSelective" parameterType="cn.edu.sicnu.sc.softwareproduction.model.Team">
    insert into team
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="root != null">
        root,
      </if>
      <if test="account != null">
        account,
      </if>
      <if test="role != null">
        role,
      </if>
      <if test="limited != null">
        limited,
      </if>
      <if test="join != null">
        join,
      </if>
      <if test="days != null">
        days,
      </if>
      <if test="hours != null">
        hours,
      </if>
      <if test="estimate != null">
        estimate,
      </if>
      <if test="consumed != null">
        consumed,
      </if>
      <if test="left != null">
        left,
      </if>
      <if test="order != null">
        order,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="root != null">
        #{root,jdbcType=INTEGER},
      </if>
      <if test="account != null">
        #{account,jdbcType=VARCHAR},
      </if>
      <if test="role != null">
        #{role,jdbcType=CHAR},
      </if>
      <if test="limited != null">
        #{limited,jdbcType=CHAR},
      </if>
      <if test="join != null">
        #{join,jdbcType=DATE},
      </if>
      <if test="days != null">
        #{days,jdbcType=SMALLINT},
      </if>
      <if test="hours != null">
        #{hours,jdbcType=REAL},
      </if>
      <if test="estimate != null">
        #{estimate,jdbcType=DECIMAL},
      </if>
      <if test="consumed != null">
        #{consumed,jdbcType=DECIMAL},
      </if>
      <if test="left != null">
        #{left,jdbcType=DECIMAL},
      </if>
      <if test="order != null">
        #{order,jdbcType=TINYINT},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="cn.edu.sicnu.sc.softwareproduction.model.TeamExample" resultType="java.lang.Long">
    select count(*) from team
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update team
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.root != null">
        root = #{record.root,jdbcType=INTEGER},
      </if>
      <if test="record.account != null">
        account = #{record.account,jdbcType=VARCHAR},
      </if>
      <if test="record.role != null">
        role = #{record.role,jdbcType=CHAR},
      </if>
      <if test="record.limited != null">
        limited = #{record.limited,jdbcType=CHAR},
      </if>
      <if test="record.join != null">
        join = #{record.join,jdbcType=DATE},
      </if>
      <if test="record.days != null">
        days = #{record.days,jdbcType=SMALLINT},
      </if>
      <if test="record.hours != null">
        hours = #{record.hours,jdbcType=REAL},
      </if>
      <if test="record.estimate != null">
        estimate = #{record.estimate,jdbcType=DECIMAL},
      </if>
      <if test="record.consumed != null">
        consumed = #{record.consumed,jdbcType=DECIMAL},
      </if>
      <if test="record.left != null">
        left = #{record.left,jdbcType=DECIMAL},
      </if>
      <if test="record.order != null">
        order = #{record.order,jdbcType=TINYINT},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update team
    set id = #{record.id,jdbcType=INTEGER},
      root = #{record.root,jdbcType=INTEGER},
      account = #{record.account,jdbcType=VARCHAR},
      role = #{record.role,jdbcType=CHAR},
      limited = #{record.limited,jdbcType=CHAR},
      join = #{record.join,jdbcType=DATE},
      days = #{record.days,jdbcType=SMALLINT},
      hours = #{record.hours,jdbcType=REAL},
      estimate = #{record.estimate,jdbcType=DECIMAL},
      consumed = #{record.consumed,jdbcType=DECIMAL},
      left = #{record.left,jdbcType=DECIMAL},
      order = #{record.order,jdbcType=TINYINT}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="cn.edu.sicnu.sc.softwareproduction.model.Team">
    update team
    <set>
      <if test="root != null">
        root = #{root,jdbcType=INTEGER},
      </if>
      <if test="account != null">
        account = #{account,jdbcType=VARCHAR},
      </if>
      <if test="role != null">
        role = #{role,jdbcType=CHAR},
      </if>
      <if test="limited != null">
        limited = #{limited,jdbcType=CHAR},
      </if>
      <if test="join != null">
        join = #{join,jdbcType=DATE},
      </if>
      <if test="days != null">
        days = #{days,jdbcType=SMALLINT},
      </if>
      <if test="hours != null">
        hours = #{hours,jdbcType=REAL},
      </if>
      <if test="estimate != null">
        estimate = #{estimate,jdbcType=DECIMAL},
      </if>
      <if test="consumed != null">
        consumed = #{consumed,jdbcType=DECIMAL},
      </if>
      <if test="left != null">
        left = #{left,jdbcType=DECIMAL},
      </if>
      <if test="order != null">
        order = #{order,jdbcType=TINYINT},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="cn.edu.sicnu.sc.softwareproduction.model.Team">
    update team
    set root = #{root,jdbcType=INTEGER},
      account = #{account,jdbcType=VARCHAR},
      role = #{role,jdbcType=CHAR},
      limited = #{limited,jdbcType=CHAR},
      join = #{join,jdbcType=DATE},
      days = #{days,jdbcType=SMALLINT},
      hours = #{hours,jdbcType=REAL},
      estimate = #{estimate,jdbcType=DECIMAL},
      consumed = #{consumed,jdbcType=DECIMAL},
      left = #{left,jdbcType=DECIMAL},
      order = #{order,jdbcType=TINYINT}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>