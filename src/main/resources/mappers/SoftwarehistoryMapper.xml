<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.edu.sicnu.sc.softwareproduction.dao.SoftwarehistoryMapper">
  <resultMap id="BaseResultMap" type="cn.edu.sicnu.sc.softwareproduction.model.Softwarehistory">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="software" jdbcType="INTEGER" property="software" />
    <result column="version" jdbcType="VARCHAR" property="version" />
    <result column="time" jdbcType="TIMESTAMP" property="time" />
  </resultMap>
  <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="cn.edu.sicnu.sc.softwareproduction.model.SoftwarehistoryWithBLOBs">
    <result column="acl" jdbcType="LONGVARCHAR" property="acl" />
    <result column="newfunction" jdbcType="LONGVARCHAR" property="newfunction" />
    <result column="solve" jdbcType="LONGVARCHAR" property="solve" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, software, version, time
  </sql>
  <sql id="Blob_Column_List">
    acl, newfunction, solve
  </sql>
  <select id="selectByExampleWithBLOBs" parameterType="cn.edu.sicnu.sc.softwareproduction.model.SoftwarehistoryExample" resultMap="ResultMapWithBLOBs">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from softwarehistory
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExample" parameterType="cn.edu.sicnu.sc.softwareproduction.model.SoftwarehistoryExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from softwarehistory
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="ResultMapWithBLOBs">
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from softwarehistory
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from softwarehistory
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="cn.edu.sicnu.sc.softwareproduction.model.SoftwarehistoryExample">
    delete from softwarehistory
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="cn.edu.sicnu.sc.softwareproduction.model.SoftwarehistoryWithBLOBs">
    insert into softwarehistory (id, software, version, 
      time, acl, newfunction, 
      solve)
    values (#{id,jdbcType=INTEGER}, #{software,jdbcType=INTEGER}, #{version,jdbcType=VARCHAR}, 
      #{time,jdbcType=TIMESTAMP}, #{acl,jdbcType=LONGVARCHAR}, #{newfunction,jdbcType=LONGVARCHAR}, 
      #{solve,jdbcType=LONGVARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="cn.edu.sicnu.sc.softwareproduction.model.SoftwarehistoryWithBLOBs">
    insert into softwarehistory
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="software != null">
        software,
      </if>
      <if test="version != null">
        version,
      </if>
      <if test="time != null">
        time,
      </if>
      <if test="acl != null">
        acl,
      </if>
      <if test="newfunction != null">
        newfunction,
      </if>
      <if test="solve != null">
        solve,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="software != null">
        #{software,jdbcType=INTEGER},
      </if>
      <if test="version != null">
        #{version,jdbcType=VARCHAR},
      </if>
      <if test="time != null">
        #{time,jdbcType=TIMESTAMP},
      </if>
      <if test="acl != null">
        #{acl,jdbcType=LONGVARCHAR},
      </if>
      <if test="newfunction != null">
        #{newfunction,jdbcType=LONGVARCHAR},
      </if>
      <if test="solve != null">
        #{solve,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="cn.edu.sicnu.sc.softwareproduction.model.SoftwarehistoryExample" resultType="java.lang.Long">
    select count(*) from softwarehistory
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update softwarehistory
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.software != null">
        software = #{record.software,jdbcType=INTEGER},
      </if>
      <if test="record.version != null">
        version = #{record.version,jdbcType=VARCHAR},
      </if>
      <if test="record.time != null">
        time = #{record.time,jdbcType=TIMESTAMP},
      </if>
      <if test="record.acl != null">
        acl = #{record.acl,jdbcType=LONGVARCHAR},
      </if>
      <if test="record.newfunction != null">
        newfunction = #{record.newfunction,jdbcType=LONGVARCHAR},
      </if>
      <if test="record.solve != null">
        solve = #{record.solve,jdbcType=LONGVARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map">
    update softwarehistory
    set id = #{record.id,jdbcType=INTEGER},
      software = #{record.software,jdbcType=INTEGER},
      version = #{record.version,jdbcType=VARCHAR},
      time = #{record.time,jdbcType=TIMESTAMP},
      acl = #{record.acl,jdbcType=LONGVARCHAR},
      newfunction = #{record.newfunction,jdbcType=LONGVARCHAR},
      solve = #{record.solve,jdbcType=LONGVARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update softwarehistory
    set id = #{record.id,jdbcType=INTEGER},
      software = #{record.software,jdbcType=INTEGER},
      version = #{record.version,jdbcType=VARCHAR},
      time = #{record.time,jdbcType=TIMESTAMP}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="cn.edu.sicnu.sc.softwareproduction.model.SoftwarehistoryWithBLOBs">
    update softwarehistory
    <set>
      <if test="software != null">
        software = #{software,jdbcType=INTEGER},
      </if>
      <if test="version != null">
        version = #{version,jdbcType=VARCHAR},
      </if>
      <if test="time != null">
        time = #{time,jdbcType=TIMESTAMP},
      </if>
      <if test="acl != null">
        acl = #{acl,jdbcType=LONGVARCHAR},
      </if>
      <if test="newfunction != null">
        newfunction = #{newfunction,jdbcType=LONGVARCHAR},
      </if>
      <if test="solve != null">
        solve = #{solve,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="cn.edu.sicnu.sc.softwareproduction.model.SoftwarehistoryWithBLOBs">
    update softwarehistory
    set software = #{software,jdbcType=INTEGER},
      version = #{version,jdbcType=VARCHAR},
      time = #{time,jdbcType=TIMESTAMP},
      acl = #{acl,jdbcType=LONGVARCHAR},
      newfunction = #{newfunction,jdbcType=LONGVARCHAR},
      solve = #{solve,jdbcType=LONGVARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="cn.edu.sicnu.sc.softwareproduction.model.Softwarehistory">
    update softwarehistory
    set software = #{software,jdbcType=INTEGER},
      version = #{version,jdbcType=VARCHAR},
      time = #{time,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>