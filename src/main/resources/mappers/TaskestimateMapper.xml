<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.edu.sicnu.sc.softwareproduction.dao.TaskestimateMapper">
  <resultMap id="BaseResultMap" type="cn.edu.sicnu.sc.softwareproduction.model.Taskestimate">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="taid" jdbcType="BIGINT" property="taid" />
    <result column="date" jdbcType="DATE" property="date" />
    <result column="left" jdbcType="REAL" property="left" />
    <result column="consumed" jdbcType="REAL" property="consumed" />
    <result column="account" jdbcType="VARCHAR" property="account" />
  </resultMap>
  <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="cn.edu.sicnu.sc.softwareproduction.model.Taskestimate">
    <result column="work" jdbcType="LONGVARCHAR" property="work" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, taid, date, left, consumed, account
  </sql>
  <sql id="Blob_Column_List">
    work
  </sql>
  <select id="selectByExampleWithBLOBs" parameterType="cn.edu.sicnu.sc.softwareproduction.model.TaskestimateExample" resultMap="ResultMapWithBLOBs">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from taskestimate
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExample" parameterType="cn.edu.sicnu.sc.softwareproduction.model.TaskestimateExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from taskestimate
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="ResultMapWithBLOBs">
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from taskestimate
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from taskestimate
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="cn.edu.sicnu.sc.softwareproduction.model.TaskestimateExample">
    delete from taskestimate
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="cn.edu.sicnu.sc.softwareproduction.model.Taskestimate">
    insert into taskestimate (id, taid, date, left, 
      consumed, account, work
      )
    values (#{id,jdbcType=INTEGER}, #{taid,jdbcType=BIGINT}, #{date,jdbcType=DATE}, #{left,jdbcType=REAL}, 
      #{consumed,jdbcType=REAL}, #{account,jdbcType=VARCHAR}, #{work,jdbcType=LONGVARCHAR}
      )
  </insert>
  <insert id="insertSelective" parameterType="cn.edu.sicnu.sc.softwareproduction.model.Taskestimate">
    insert into taskestimate
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="taid != null">
        taid,
      </if>
      <if test="date != null">
        date,
      </if>
      <if test="left != null">
        left,
      </if>
      <if test="consumed != null">
        consumed,
      </if>
      <if test="account != null">
        account,
      </if>
      <if test="work != null">
        work,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="taid != null">
        #{taid,jdbcType=BIGINT},
      </if>
      <if test="date != null">
        #{date,jdbcType=DATE},
      </if>
      <if test="left != null">
        #{left,jdbcType=REAL},
      </if>
      <if test="consumed != null">
        #{consumed,jdbcType=REAL},
      </if>
      <if test="account != null">
        #{account,jdbcType=VARCHAR},
      </if>
      <if test="work != null">
        #{work,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="cn.edu.sicnu.sc.softwareproduction.model.TaskestimateExample" resultType="java.lang.Long">
    select count(*) from taskestimate
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update taskestimate
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.taid != null">
        taid = #{record.taid,jdbcType=BIGINT},
      </if>
      <if test="record.date != null">
        date = #{record.date,jdbcType=DATE},
      </if>
      <if test="record.left != null">
        left = #{record.left,jdbcType=REAL},
      </if>
      <if test="record.consumed != null">
        consumed = #{record.consumed,jdbcType=REAL},
      </if>
      <if test="record.account != null">
        account = #{record.account,jdbcType=VARCHAR},
      </if>
      <if test="record.work != null">
        work = #{record.work,jdbcType=LONGVARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map">
    update taskestimate
    set id = #{record.id,jdbcType=INTEGER},
      taid = #{record.taid,jdbcType=BIGINT},
      date = #{record.date,jdbcType=DATE},
      left = #{record.left,jdbcType=REAL},
      consumed = #{record.consumed,jdbcType=REAL},
      account = #{record.account,jdbcType=VARCHAR},
      work = #{record.work,jdbcType=LONGVARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update taskestimate
    set id = #{record.id,jdbcType=INTEGER},
      taid = #{record.taid,jdbcType=BIGINT},
      date = #{record.date,jdbcType=DATE},
      left = #{record.left,jdbcType=REAL},
      consumed = #{record.consumed,jdbcType=REAL},
      account = #{record.account,jdbcType=VARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="cn.edu.sicnu.sc.softwareproduction.model.Taskestimate">
    update taskestimate
    <set>
      <if test="taid != null">
        taid = #{taid,jdbcType=BIGINT},
      </if>
      <if test="date != null">
        date = #{date,jdbcType=DATE},
      </if>
      <if test="left != null">
        left = #{left,jdbcType=REAL},
      </if>
      <if test="consumed != null">
        consumed = #{consumed,jdbcType=REAL},
      </if>
      <if test="account != null">
        account = #{account,jdbcType=VARCHAR},
      </if>
      <if test="work != null">
        work = #{work,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="cn.edu.sicnu.sc.softwareproduction.model.Taskestimate">
    update taskestimate
    set taid = #{taid,jdbcType=BIGINT},
      date = #{date,jdbcType=DATE},
      left = #{left,jdbcType=REAL},
      consumed = #{consumed,jdbcType=REAL},
      account = #{account,jdbcType=VARCHAR},
      work = #{work,jdbcType=LONGVARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="cn.edu.sicnu.sc.softwareproduction.model.Taskestimate">
    update taskestimate
    set taid = #{taid,jdbcType=BIGINT},
      date = #{date,jdbcType=DATE},
      left = #{left,jdbcType=REAL},
      consumed = #{consumed,jdbcType=REAL},
      account = #{account,jdbcType=VARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>